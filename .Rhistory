ggplot(aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value, alpha=value)) +
geom_contour(aes(z=value), color='white', size=0.1) +
geom_point(data=sample, mapping=aes(x=y1, y=y2, color='red'), show.legend=FALSE) +
scale_fill_gradient(low='grey', high='steelblue', guide=FALSE) +
scale_alpha(guide=FALSE) +
theme(legend.position='None') + theme_bw() +
ggtitle(paste0('corr=',corr)) + xlab('y1') + ylab('y2')
}
p1 <- allInOne(corr=-0.5)
p2 <- allInOne(corr=0)
p3 <- allInOne(corr=0.5)
grid.arrange(p1,p2,p3, nrow=1)
### 2. Draw yourself Figure 7.2
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
test
cov(test)
dim(test)
nrow(test)
colMeans(test)
colMeans(test)[2]
inv(L0)
# Load Data
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
# Preparing
n <- nrow(test)
ybar <- colMeans(test)[2]
Sigma <- cov(test)
THETA <- SIGMA <- NULL
inv <- solve
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
inv(L0)
mu0
ybar
apply(test,2, mean)
ybar <- colMeans(test)
n*inv(Sigma)
inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar
Ln
#update mu
Ln = inv(inv(L0) + n*inv(Sigma))
Ln
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
mvrnorm(1, mun, Ln)
# update sigma
test
theta
# Preparing
n <- nrow(test)
ybar <- colMeans(test)
Sigma <- cov(test)
THETA <- SIGMA <- NULL
inv <- solve
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
# update theta
Ln = inv(inv(L0) + n*inv(Sigma))
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
theta = mvrnorm(1, mun, Ln)
# update sigma
test
theta
# update sigma
test - theta
# update sigma
t(test) - theta
theta
test
theta
c(35,33)-theta
t(test)-theta
test-theta
# update sigma
(t(test)-theta)%*%t(t(test)-theta)
# update sigma
S0 + (t(test)-theta)%*%t(t(test)-theta)
S0
rWishart(1, nu0+n, Sn)
# update sigma
Sn = S0 + (t(test)-theta)%*%t(t(test)-theta)
rWishart(1, nu0+n, Sn)
rWishart(1, nu0+n, Sn)[,,1]
rWishart(1, nu0+n, inv(Sn))[,,1]
rWishart(1, nu0+n, inv(Sn))
inv(rWishart(1, nu0+n, inv(Sn)))
rWishart(1, nu0+n, inv(Sn))[,,1]
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
inv(rWishart(1, nu0+n, inv(Sn))[,,1])
c(Sigma)
rm(list=ls())
# Load Data
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
# Preparing
n <- nrow(test)
ybar <- colMeans(test)
Sigma <- cov(test)
THETA <- SIGMA <- NULL
inv <- solve
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
for(i in 1:5000){
# update theta
Ln = inv(inv(L0) + n*inv(Sigma))
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
theta = mvrnorm(1, mun, Ln)
# update sigma
Sn = S0 + (t(test)-theta)%*%t(t(test)-theta)
Sigma = inv(rWishart(1, nu0+n, inv(Sn))[,,1])
# Save results
THETA <- rbind(THETA, theta)
SIGMA <- rbind(SIGMA, c(Sigma))
}
THETA
rownames(THETA) <- 1:5000
THETA
rownames(SIGMA) <- 1:5000
SIGMA
sample.size = 5000
# Load Data
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
# Preparing
n <- nrow(test)
ybar <- colMeans(test)
Sigma <- cov(test)
THETA <- NULL
SIGMA <- NULL
inv <- solve
sample.size = 5000
sample.new = NULL
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
set.seed(2021)
for(i in 1:sample.size){
# update theta
Ln = inv(inv(L0) + n*inv(Sigma))
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
theta = mvrnorm(1, mun, Ln)
# update sigma
Sn = S0 + (t(test)-theta)%*%t(t(test)-theta)
Sigma = inv(rWishart(1, nu0+n, inv(Sn))[,,1])
# Save results
THETA <- rbind(THETA, theta)
SIGMA <- rbind(SIGMA, c(Sigma))
# sample new
sample.new = rbind(sample.new, mvrnorm(n=1, mu=theta, Sigma=Sigma))
}
sample.new
allInOne(corr=0.5)
# MVN pdf
calc.dmvn = Vectorize(function(a,b, mu=theta, sigma=Sigma){
y <- c(a,b)
log.p <- (-nrow(mu)/2)*log(2*pi) - 0.5*log(det(sigma)) - 0.5*(t(y-mu) %*% inv(sigma) %*% (y-mu))
exp(log.p)
})
Sigma
outer(xLim, yLim, FUN=calc.dmvn)
# calculate density
xLim = seq(35, 60, length=101)
yLim = seq(40, 65, length=101)
outer(xLim, yLim, FUN=calc.dmvn)
mu
theta
theta
matrix(theta)
# MVN pdf
calc.dmvn = Vectorize(function(a,b, mu=theta, sigma=Sigma){
y <- c(a,b)
mu <- matrix(mu)
log.p <- (-nrow(mu)/2)*log(2*pi) - 0.5*log(det(sigma)) - 0.5*(t(y-mu) %*% inv(sigma) %*% (y-mu))
exp(log.p)
})
# calculate density
xLim = seq(35, 60, length=101)
yLim = seq(40, 65, length=101)
outer(xLim, yLim, FUN=calc.dmvn)
theta
outer(xLim, yLim, FUN=calc.dmvn) %>% View
rownames(density.mvn) <- xLim
colnames(density.mvn) <- yLim
density.mvn <- melt(density.mvn)
density.mvn <- outer(xLim, yLim, FUN=calc.dmvn) %>% View
rownames(density.mvn) <- xLim
colnames(density.mvn) <- yLim
density.mvn <- melt(density.mvn)
# calculate density
xLim = seq(35, 60, length=101)
yLim = seq(40, 65, length=101)
density.mvn <- outer(xLim, yLim, FUN=calc.dmvn) %>% View
rownames(density.mvn) <- xLim
colnames(density.mvn) <- yLim
density.mvn <- melt(density.mvn)
density.mvn <- outer(xLim, yLim, FUN=calc.dmvn)
rownames(density.mvn) <- xLim
colnames(density.mvn) <- yLim
density.mvn <- melt(density.mvn)
density.mvn
density.mvn %>% View
# graph
density.mvn %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value, alpha=value)) +
geom_contour(aes(z=value), color='white', size=0.1) +
scale_fill_gradient(low='grey', high='steelblue', guide=FALSE) +
scale_alpha(guide=FALSE) +
theme(legend.position='None') + theme_bw() +
ggtitle(paste0('corr=',corr)) + xlab('y1') + ylab('y2')
# graph
density.mvn %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value, alpha=value)) +
geom_contour(aes(z=value), color='white', size=0.1) +
scale_fill_gradient(low='grey', high='steelblue', guide=FALSE) +
scale_alpha(guide=FALSE) +
theme(legend.position='None') + theme_bw()
abline(0,1)
getwd()
### 2. Draw yourself Figure 7.2
source("data/hdr2d.R")
plot.hdr2d(THETA,xlab=expression(theta[1]),ylab=expression(theta[2]) )
abline(0,1)
mean( THETA[,2]-THETA[,1])
mean( THETA[,2]>THETA[,1])
quantile(  SIGMA[,2]/sqrt(SIGMA[,1]*SIGMA[,4]), prob=c(.025,.5,.975) )
quantile(   THETA[,2]-THETA[,1], prob=c(.025,.5,.975) )
plot.hdr2d()
plot.hdr2d(
plot.hdr2d
THETA %>% View
rownames(THETA) <- 1:sample.size
THETA
# Load Data
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
# Preparing
n <- nrow(test)
ybar <- colMeans(test)
Sigma <- cov(test)
THETA <- NULL
SIGMA <- NULL
inv <- solve
sample.size = 5000
sample.new = NULL
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
set.seed(2021)
for(i in 1:sample.size){
# update theta
Ln = inv(inv(L0) + n*inv(Sigma))
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
theta = mvrnorm(1, mun, Ln)
# update sigma
Sn = S0 + (t(test)-theta)%*%t(t(test)-theta)
Sigma = inv(rWishart(1, nu0+n, inv(Sn))[,,1])
# Save results
THETA <- rbind(THETA, theta)
SIGMA <- rbind(SIGMA, c(Sigma))
# sample new
sample.new = rbind(sample.new, mvrnorm(n=1, mu=theta, Sigma=Sigma))
}
rownames(THETA) <- 1:sample.size
rownames(SIGMA) <- 1:sample.size
THETA %>% View
plot.hdr2d(THETA,xlab=expression(theta[1]),ylab=expression(theta[2]) )
require(ash)
install.packages('ash')
library(ash)
library(ash)
require(ash)
install.packages('ash')
library(ash)
require(ash)
plot.hdr2d(THETA,xlab=expression(theta[1]),ylab=expression(theta[2]) )
plot.hdr2d(YS,xlab=expression(italic(y[1])),ylab=expression(italic(y[2])),
xlim=c(0,100),ylim=c(0,100) )
plot.hdr2d(samples.new,xlab=expression(italic(y[1])),ylab=expression(italic(y[2])),
xlim=c(0,100),ylim=c(0,100) )
plot.hdr2d(samplesnew,xlab=expression(italic(y[1])),ylab=expression(italic(y[2])),
xlim=c(0,100),ylim=c(0,100) )
plot.hdr2d(sample.new,xlab=expression(italic(y[1])),ylab=expression(italic(y[2])),
xlim=c(0,100),ylim=c(0,100) )
points(Y[,1],Y[,2],pch=16,cex=.7)
points(test[,1],test[,2],pch=16,cex=.7)
abline(0,1)
# graph
par(mfrow=c(1,2),mgp=c(1.75,.75,0),mar=c(3,3,1,1))
plot.hdr2d(THETA,xlab=expression(theta[1]),ylab=expression(theta[2]) )
abline(0,1)
plot.hdr2d(sample.new,xlab=expression(italic(y[1])),ylab=expression(italic(y[2])),
xlim=c(0,100),ylim=c(0,100) )
points(test[,1],test[,2],pch=16,cex=.7)
abline(0,1)
# graph
Theta
rm(list=ls())
# Load Data
test <- matrix(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34,
70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68,
86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33), ncol=2, byrow=FALSE)
colnames(test) <- c('pretest','posttest')
# Preparing
n <- nrow(test)
ybar <- colMeans(test)
Sigma <- cov(test)
THETA <- NULL
SIGMA <- NULL
inv <- solve
sample.size = 5000
sample.new = NULL
# prior
mu0 <- c(50,50); nu0 <- 4 #(nu0 = p+2 = 4)
S0 <- L0 <- matrix(c(625,312.5,312.5,625), nrow=2, ncol=2)
set.seed(2021)
for(i in 1:sample.size){
# update theta
Ln = inv(inv(L0) + n*inv(Sigma))
mun = Ln %*% (inv(L0)%*%mu0 + n*inv(Sigma)%*%ybar)
theta = mvrnorm(1, mun, Ln)
# update sigma
Sn = S0 + (t(test)-theta)%*%t(t(test)-theta)
Sigma = inv(rWishart(1, nu0+n, inv(Sn))[,,1])
# Save results
THETA <- rbind(THETA, theta)
SIGMA <- rbind(SIGMA, c(Sigma))
# sample new
sample.new = rbind(sample.new, mvrnorm(n=1, mu=theta, Sigma=Sigma))
}
rownames(THETA) <- 1:sample.size
rownames(SIGMA) <- 1:sample.size
# graph
Theta
# graph
THETA
# graph
names(THETA)
# graph
namesdata.frame(THETA)()
# graph
names(data.frame(THETA))
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point()
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange')
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='green')
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='darkgreen')
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='oragne')
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange')
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0)
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) + coord_fixed(ratio=1)
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) + coord_fixed(ratio=2)
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) + coord_fixed(ratio=3)
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) + geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) + coord_fixed(ratio=1)
# graph
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
coord_fixed(ratio=1) +
ggtitle('Posterior draws of Mu')
sample.new
data.frame(sample.new)
names(data.frame(sample.new))
data.frame(sample.new) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
coord_fixed(ratio=1) +
ggtitle('Posterior Predictive')
data.frame(sample.new) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
# coord_fixed(ratio=1) +
ggtitle('Posterior Predictive')
grid.arrange(p1, p2, nrow=1)
# graph
p1 <- data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
ggtitle('Posterior draws of Mu')
p2 <- data.frame(sample.new) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
ggtitle('Posterior Predictive')
grid.arrange(p1, p2, nrow=1)
# graph(ggplot 활용)
p1 <- data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta)) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta)) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta_1)) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta)_1) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta)_1) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta[1])) +
ggtitle('Posterior draws of Mu')
# graph(ggplot 활용)
data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta[1])) + ylab(expression(theta[2])) +
ggtitle('Posterior draws of Mu')
p2 <- data.frame(sample.new) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(y[1])) + ylab(expression(y[2])) +
ggtitle('Posterior Predictive')
grid.arrange(p1, p2, nrow=1)
# graph(ggplot 활용)
p1 <- data.frame(THETA) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(theta[1])) + ylab(expression(theta[2])) +
ggtitle('Posterior draws of Mu')
p2 <- data.frame(sample.new) %>%
ggplot(aes(x=pretest, y=posttest)) +
geom_point(size=1, color='orange') +
geom_abline(slope=1, intercept=0) +
xlab(expression(y[1])) + ylab(expression(y[2])) +
ggtitle('Posterior Predictive')
grid.arrange(p1, p2, nrow=1)
grid.arrange(p1, p2, nrow=1) +
ggtitle('Reading Comprehension')
grid.arrange(p1, p2, nrow=1)
